1. NODE的特点

Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 的特点就是事件驱动、非阻塞式、异步I/O。提供了很多api,比如能对文件系统的操作，网络通信等js没有的共呢个，提供了Commonjs模块化规范等特性…
详情可以查看nodejs wiki

1.1 一般服务器：就像只有一个窗口能办业务，买东西要排队。。。

阻塞就是当你发送多个请求，如果只有一个线程的话，只能处理一个请求，那么排在后面的请求就要排队等待，第一个请求没有处理完成的话，后面的请求会阻塞。
在当今服务器的性能限制，无法处理太高高并发量的请求，如果请求过多，服务器可能会宕掉。
一般会采取多线程来处理并发请求，但是每个请求都创建一个线程（线程会消耗内存资源）的话太消耗资源。所以很多公司会通过增加服务器来减少请求多的压力，但毕竟服务器是有限的。

1.2 node 异步，事件驱动的

1）何为事件驱动，何为异步？

例如：我们的I/O操作就像一个事件，这个事件处理完成后会触发回调函数（回调是异步的），执行回调函数体内的逻辑。

所以nodejs可以用来处理高并发请求，因为nodejs是非阻塞（非阻塞才能实现异步），他不会阻塞主线程的运行

nodejs会把所有阻塞的部分压入一个线程池，然后主线程通过一个事件队列和线程池协同合作

用例子来说明：我们同样是要发起请求，等待服务器端响应；但是与银行例子不同的是，这次我们点完餐后拿到了一个号码，拿到号码，我们往往会在位置上等待，而在我们后面的请求会继续得到处理，同样是拿了一个号码然后到一旁等待，接待员能一直进行处理。

等到饭菜做号了，会喊号码，我们拿到了自己的饭菜，进行后续的处理（吃饭）。这个喊号码的动作在NodeJS中叫做回调（Callback），能在事件（烧菜，I/O）处理完成后继续执行后面的逻辑（吃饭），这体现了NodeJS的显著特点，异步机制、事件驱动整个过程没有阻塞新用户的连接（点餐），也不需要维护已经点餐的用户与厨师的连接。

基于这样的机制，理论上陆续有用户请求连接，NodeJS都可以进行响应，因此NodeJS能支持比Java、PHP程序更高的并发量虽然维护事件队列也需要成本，再由于NodeJS是单线程，事件队列越长，得到响应的时间就越长，并发量上去还是会力不从心。

2）NodeJS是怎么解决并发连接这个问题的：更改连接到服务器的方式，每个连接发射（emit）一个在NodeJS引擎进程中运行的事件（Event），放进事件队列当中，而不是为每个连接生成一个新的OS线程（并为其分配一些配套内存）。

3）非阻塞I/O
NodeJS遇到I/O事件会创建一个线程去执行，然后主线程会继续往下执行的，因此，拿profile的动作触发一个I/O事件，马上就会执行拿timeline的动作，两个动作并行执行，假如各需要1S，那么总的时间也就是1S。它们的I/O操作执行完成后，发射一个事件，profile和timeline，事件代理接收后继续往下执行后面的逻辑，这就是NodeJS非阻塞I/O的特点。

2. nodejs的优缺点

2.1 优点：

高并发（最重要的优点）

适合I/O密集型应用

2.2 缺点：

不适合CPU密集型应用；CPU密集型应用给Node带来的挑战主要是：由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循环），将会导致CPU时间片不能释放，使得后续I/O无法发起；
解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I/O调用的发起；

只支持单核CPU，不能充分利用CPU

可靠性低，一旦代码某个环节崩溃，整个系统都崩溃

原因：单进程，单线程

解决方案：
（1）Nnigx反向代理，负载均衡，开多个进程，绑定多个端口；

（2）开多个进程监听同一个端口，使用cluster模块；

开源组件库质量参差不齐，更新快，向下不兼容

Debug不方便，错误没有stack trace

3.nodejs的应用场景

RESTful API
这是NodeJS最理想的应用场景，可以处理数万条连接，本身没有太多的逻辑，只需要请求API，组织数据进行返回即可。它本质上只是从某个数据库中查找一些值并将它们组成一个响应。由于响应是少量文本，入站请求也是少量的文本，因此流量不高，一台机器甚至也可以处理最繁忙的公司的API需求。

统一Web应用的UI层
目前MVC的架构，在某种意义上来说，Web开发有两个UI层，一个是在浏览器里面我们最终看到的，另一个在server端，负责生成和拼接页面。

不讨论这种架构是好是坏，但是有另外一种实践，面向服务的架构，更好的做前后端的依赖分离。如果所有的关键业务逻辑都封装成REST调用，就意味着在上层只需要考虑如何用这些REST接口构建具体的应用。那些后端程序员们根本不操心具体数据是如何从一个页面传递到另一个页面的，他们也不用管用户数据更新是通过Ajax异步获取的还是通过刷新页面。

大量Ajax请求的应用
例如个性化应用，每个用户看到的页面都不一样，缓存失效，需要在页面加载的时候发起Ajax请求，NodeJS能响应大量的并发请求。　　总而言之，NodeJS适合运用在高并发、I/O密集、少量业务逻辑的场景。
